#!/bin/bash
# ChezMoi template for Bitwarden pull script
# This script pulls files from Bitwarden based on the configuration in secrets.toml

# Exit on error
set -e

# Set log file path
LOG_DIR="{{ .chezmoi.homeDir }}/.secrets"
LOG_FILE="${LOG_DIR}/bw-pull.log"

# Create log directory if it doesn't exist
mkdir -p "${LOG_DIR}"

# Clear previous log file
echo "# Bitwarden Pull Log - $(date)" > "${LOG_FILE}"
echo "-----------------------------------" >> "${LOG_FILE}"

# Ensure Bitwarden is unlocked
BW_STATUS=$(bw status | jq -r '.status')
if [ "${BW_STATUS}" != "unlocked" ]; then
  echo "Bitwarden is locked. Please unlock with 'bw unlock'"
  exit 1
fi

bw sync

# Function to create directory if it doesn't exist
create_dir() {
  local dir="$1"
  if [ ! -d "${dir}" ]; then
    mkdir -p "${dir}"
    echo "Created directory: ${dir}"
  fi
}

# Function to get attachment from Bitwarden
get_attachment() {
  local note_name="$1"
  local attachment_name="$2"
  local output_dir="$3"
  local output_file="${output_dir}/${attachment_name}"
  local missing_file="${output_dir}/.missing.log"

  # Create output directory if it doesn't exist
  create_dir "${output_dir}"

  # Clear missing file log at the beginning for this directory
  if [ ! -f "${missing_file}" ]; then
    touch "${missing_file}"
  fi

  echo "Getting ${attachment_name} from ${note_name}..."

  # Check if the note exists
  NOTE_ID=$(bw get item "${note_name}" --raw 2>/dev/null || echo "")

  if [ -z "${NOTE_ID}" ]; then
    echo "ERROR: Note '${note_name}' not found in Bitwarden" | tee -a "${LOG_FILE}"
    echo "${attachment_name}" >> "${missing_file}"
    return 1
  fi

  # Get attachment ID from the note
  ATTACHMENT_ID=$(echo "${NOTE_ID}" | \
		      jq -r ".attachments[] | \
		      select(.fileName==\"${attachment_name}\") | \
		       .id" 2>/dev/null || echo "")

  if [ -z "${ATTACHMENT_ID}" ]; then
    echo "ERROR: Attachment '${attachment_name}' not found in note '${note_name}'" | tee -a "${LOG_FILE}"
    echo "${attachment_name}" >> "${missing_file}"
    return 1
  fi

  # Download the attachment
  bw get attachment "${ATTACHMENT_ID}" \
     --itemid "$(echo "${NOTE_ID}" | \
     jq -r '.id')" --output "${output_file}" > /dev/null

  if [ $? -eq 0 ]; then
    echo "Successfully downloaded ${attachment_name} to ${output_file}"
    # Remove from missing file if it exists
    sed -i "/${attachment_name}/d" "${missing_file}"
    return 0
  else
    echo "ERROR: Failed to download attachment '${attachment_name}'" | tee -a "${LOG_FILE}"
    echo "${attachment_name}" >> "${missing_file}"
    return 1
  fi
}

echo "Starting Bitwarden pull process..."

# Process secrets entries from ChezMoi data
{{- range $category, $categoryData := .secrets }}
echo "Processing category: {{ $category }}"
{{- range $section, $sectionData := $categoryData }}
{{- range $subsection, $subsectionData := $sectionData }}
{{- if hasKey $subsectionData "files" }}
  # Create base secrets directory for this section
  SECRET_DIR="{{ $.chezmoi.homeDir }}/.secrets/{{ $category }}/{{ $section }}/{{ $subsection }}"
  echo "Processing section: {{ $section }}.{{ $subsection }}"

  # Process each file in the section
  {{- range $file := $subsectionData.files }}
  get_attachment "{{ $section }}.{{ $subsection }}" "{{ $file }}" "${SECRET_DIR}"
  {{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

echo "Bitwarden pull process completed."

# Check for any missing files
if grep -q "ERROR" "${LOG_FILE}"; then
  echo "There were errors during the pull process. Check ${LOG_FILE} for details."
  exit 1
fi

exit 0
