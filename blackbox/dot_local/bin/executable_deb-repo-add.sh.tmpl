#!/usr/bin/env bash
# deb-repo-add.sh - Add packages to local Debian repository
# Managed by ChezMoi. Do not edit.
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::

{{- if .isUbuntu }}
set -euo pipefail

# Configuration
DEB_REPO_DIR="{{ .chezmoi.homeDir }}/.local/share/deb"
POOL_DIR="${DEB_REPO_DIR}/pool"
DISTS_DIR="${DEB_REPO_DIR}/dists"
CACHE_DIR="{{ env "XDG_CACHE_HOME" | default (printf "%s/.cache" .chezmoi.homeDir) }}/deb"

REPO_CODENAME="local"
REPO_COMPONENT="main"
REPO_ARCHITECTURE="amd64"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# Function to parse deb package information
parse_deb_info() {
    local deb_file="$1"

    if [[ ! -f "$deb_file" ]]; then
        log_error "File not found: $deb_file"
        return 1
    fi

    if ! dpkg-deb --info "$deb_file" >/dev/null 2>&1; then
        log_error "Invalid Debian package: $deb_file"
        return 1
    fi

    local package_name version architecture
    package_name=$(dpkg-deb --field "$deb_file" Package)
    version=$(dpkg-deb --field "$deb_file" Version)
    architecture=$(dpkg-deb --field "$deb_file" Architecture)

    echo "$package_name" "$version" "$architecture"
}

# Function to calculate file checksums
calculate_checksums() {
    local file="$1"

    echo "MD5: $(md5sum "$file" | cut -d' ' -f1)"
    echo "SHA1: $(sha1sum "$file" | cut -d' ' -f1)"
    echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1)"
}

# Function to update repository indexes
update_repo_indexes() {
    log_info "Updating repository indexes..."

    cd "${DEB_REPO_DIR}"

    # Generate Packages file
    dpkg-scanpackages -m "pool/${REPO_COMPONENT}" > "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages"
    gzip -9c "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" > "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages.gz"

    # Update Release file
    local release_file="dists/${REPO_CODENAME}/Release"
    local temp_release=$(mktemp)

    # Update date and preserve metadata
    sed "/^Date:/c\\Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')" "${release_file}" | \
    grep -v "^MD5Sum:\|^SHA1:\|^SHA256:\|^ " > "${temp_release}"

    # Add checksums
    echo "MD5Sum:" >> "${temp_release}"
    find dists/${REPO_CODENAME} -type f ! -name "Release*" -exec md5sum {} \; | \
        sed 's|dists/'${REPO_CODENAME}'/| |' | \
        awk '{printf " %s %8d %s\n", $1, length($1), $2}' >> "${temp_release}"

    echo "SHA1:" >> "${temp_release}"
    find dists/${REPO_CODENAME} -type f ! -name "Release*" -exec sha1sum {} \; | \
        sed 's|dists/'${REPO_CODENAME}'/| |' | \
        awk '{printf " %s %8d %s\n", $1, length($1), $2}' >> "${temp_release}"

    echo "SHA256:" >> "${temp_release}"
    find dists/${REPO_CODENAME} -type f ! -name "Release*" -exec sha256sum {} \; | \
        sed 's|dists/'${REPO_CODENAME}'/| |' | \
        awk '{printf " %s %8d %s\n", $1, length($1), $2}' >> "${temp_release}"

    mv "${temp_release}" "${release_file}"

    log_info "Repository indexes updated successfully"
}

# Function to add a package file
add_package() {
    local source_file="$1"

    if [[ ! -f "$source_file" ]]; then
        log_error "File not found: $source_file"
        return 1
    fi

    # Parse package information
    local parse_result
    if ! parse_result=$(parse_deb_info "$source_file"); then
        return 1
    fi

    read -r package_name version architecture <<< "$parse_result"
    log_info "Adding package: $package_name version $version ($architecture)"

    # Create package pool structure
    local package_dir="${POOL_DIR}/${REPO_COMPONENT}/${package_name:0:1}/${package_name}"
    mkdir -p "$package_dir"

    # Generate destination filename
    local filename="${package_name}_${version}_${architecture}.deb"
    local dest_file="${package_dir}/${filename}"

    if [[ -f "$dest_file" ]]; then
        log_warn "Package already exists: $filename"
        read -p "Overwrite? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Skipping package addition"
            return 0
        fi
    fi

    # Copy package to repository
    cp "$source_file" "$dest_file"
    log_info "Added package to: $dest_file"

    # Show package details
    log_debug "Package details:"
    calculate_checksums "$dest_file" | sed 's/^/  /'

    # Update repository indexes
    update_repo_indexes

    log_info "Successfully added package: $package_name"
}

# Function to download and add package
download_and_add() {
    local package_spec="$1"
    local temp_dir
    temp_dir=$(mktemp -d)

    log_info "Downloading package: $package_spec"

    # Download package without installing
    if apt download "$package_spec" -o Dir::Cache::Archives="$temp_dir"; then
        # Add all downloaded files
        local downloaded_files
        mapfile -t downloaded_files < <(find "$temp_dir" -name "*.deb")

        if [[ ${#downloaded_files[@]} -eq 0 ]]; then
            log_error "No .deb files downloaded for: $package_spec"
            rm -rf "$temp_dir"
            return 1
        fi

        for file in "${downloaded_files[@]}"; do
            add_package "$file"
        done
    else
        log_error "Failed to download package: $package_spec"
        rm -rf "$temp_dir"
        return 1
    fi

    rm -rf "$temp_dir"
}

# Function to list packages in repository
list_packages() {
    log_info "Packages in local repository:"

    if [[ ! -f "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" ]]; then
        echo "  No packages found (repository may not be initialized)"
        return
    fi

    # Parse Packages file and show summary
    awk '
    /^Package:/ { pkg = $2 }
    /^Version:/ { ver = $2 }
    /^Architecture:/ { arch = $2 }
    /^$/ { if (pkg) printf "  %s (%s) [%s]\n", pkg, ver, arch; pkg=""; ver=""; arch="" }
    END { if (pkg) printf "  %s (%s) [%s]\n", pkg, ver, arch }
    ' "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages"
}

# Function to remove package
remove_package() {
    local package_name="$1"

    log_info "Removing package: $package_name"

    # Find package files
    local package_files
    mapfile -t package_files < <(find "${POOL_DIR}" -name "${package_name}_*.deb")

    if [[ ${#package_files[@]} -eq 0 ]]; then
        log_warn "No packages found matching: $package_name"
        return 0
    fi

    local removed_count=0
    for file in "${package_files[@]}"; do
        log_info "Removing: ${file##*/}"
        rm -f "$file"
        ((removed_count++))

        # Remove empty directories
        local dir=$(dirname "$file")
        if [[ -d "$dir" ]] && [[ -z "$(ls -A "$dir")" ]]; then
            rmdir "$dir" 2>/dev/null || true
        fi
    done

    # Update repository indexes
    update_repo_indexes

    log_info "Removed $removed_count package(s) for: $package_name"
}

# Function to show usage
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS] COMMAND

Commands:
  add FILE         Add a local .deb file to the repository
  download SPEC    Download and add a package from apt repositories
  list            List all packages in the repository
  remove PACKAGE   Remove a package from the repository
  update          Update repository indexes

Options:
  -h, --help      Show this help message

Examples:
  $0 add ./my-package_1.0.0_amd64.deb
  $0 download firefox
  $0 download firefox=85.0.1+build1-0ubuntu1
  $0 list
  $0 remove my-package
  $0 update
EOF
}

# Main function
main() {
    # Check if repository is initialized
    if [[ ! -d "$DEB_REPO_DIR" ]]; then
        log_error "Repository not initialized. Run 'deb-repo-init.sh' first."
        exit 1
    fi

    case "${1:-}" in
        "add")
            if [[ $# -lt 2 ]]; then
                log_error "Missing file argument for add command"
                show_usage
                exit 1
            fi
            add_package "$2"
            ;;
        "download")
            if [[ $# -lt 2 ]]; then
                log_error "Missing package specification for download command"
                show_usage
                exit 1
            fi
            download_and_add "$2"
            ;;
        "list")
            list_packages
            ;;
        "remove")
            if [[ $# -lt 2 ]]; then
                log_error "Missing package name for remove command"
                show_usage
                exit 1
            fi
            remove_package "$2"
            ;;
        "update")
            update_repo_indexes
            ;;
        "-h"|"--help")
            show_usage
            ;;
        "")
            log_error "No command specified"
            show_usage
            exit 1
            ;;
        *)
            log_error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
{{- else }}
echo "This script is only for Ubuntu systems"
exit 1
{{- end }}