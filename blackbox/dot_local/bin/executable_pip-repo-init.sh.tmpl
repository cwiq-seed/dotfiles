#!/usr/bin/env bash
# pip-repo-init.sh - Initialize local PEP 503 compliant pip repository
# Managed by ChezMoi. Do not edit.
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::

set -euo pipefail

# Configuration following XDG conventions
PIP_REPO_DIR="{{ .chezmoi.homeDir }}/.local/share/pip"
SIMPLE_DIR="${PIP_REPO_DIR}/simple"
PACKAGES_DIR="${PIP_REPO_DIR}/packages"
CACHE_DIR="{{ env "XDG_CACHE_HOME" | default (printf "%s/.cache" .chezmoi.homeDir) }}/pip"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to initialize repository structure
init_repo_structure() {
    log_info "Initializing local pip repository structure..."

    # Create directory structure
    mkdir -p "${SIMPLE_DIR}"
    mkdir -p "${PACKAGES_DIR}"
    mkdir -p "${CACHE_DIR}"

    log_info "Created repository directories:"
    log_info "  Simple index: ${SIMPLE_DIR}"
    log_info "  Packages: ${PACKAGES_DIR}"
    log_info "  Cache: ${CACHE_DIR}"
}

# Function to create .gitignore for repository
create_gitignore() {
    local gitignore_file="${PIP_REPO_DIR}/.gitignore"

    cat > "${gitignore_file}" << 'EOF'
# Pip repository .gitignore
# Ignore downloaded packages but keep structure
packages/*.whl
packages/*.tar.gz
packages/*.egg
packages/*/

# Keep important files
!packages/.keep
!simple/
!simple/index.html
EOF

    log_info "Created .gitignore at ${gitignore_file}"
}

# Function to create keep files
create_keep_files() {
    touch "${PACKAGES_DIR}/.keep"
    touch "${SIMPLE_DIR}/.keep"
    log_info "Created .keep files for empty directories"
}

# Function to set permissions
set_permissions() {
    chmod 755 "${PIP_REPO_DIR}"
    chmod 755 "${SIMPLE_DIR}"
    chmod 755 "${PACKAGES_DIR}"
    chmod 644 "${SIMPLE_DIR}/index.html"

    log_info "Set appropriate permissions for repository"
}

# Function to validate repository structure
validate_repo() {
    local errors=0

    # Check required directories
    for dir in "${SIMPLE_DIR}" "${PACKAGES_DIR}"; do
        if [[ ! -d "$dir" ]]; then
            log_error "Missing directory: $dir"
            ((errors++))
        fi
    done

    # Check index.html
    if [[ ! -f "${SIMPLE_DIR}/index.html" ]]; then
        log_error "Missing index file: ${SIMPLE_DIR}/index.html"
        ((errors++))
    fi

    if [[ $errors -eq 0 ]]; then
        log_info "Repository validation passed"
        return 0
    else
        log_error "Repository validation failed with $errors errors"
        return 1
    fi
}

# Function to show repository status
show_status() {
    log_info "Local pip repository status:"
    echo "  Repository root: ${PIP_REPO_DIR}"
    echo "  Simple index: ${SIMPLE_DIR}"
    echo "  Packages dir: ${PACKAGES_DIR}"
    echo "  Cache dir: ${CACHE_DIR}"
    echo

    # Count packages
    local package_count
    package_count=$(find "${PACKAGES_DIR}" -name "*.whl" -o -name "*.tar.gz" | wc -l 2>/dev/null || echo "0")
    echo "  Total packages: ${package_count}"

    # List package directories
    local pkg_dirs
    pkg_dirs=$(find "${SIMPLE_DIR}" -mindepth 1 -maxdepth 1 -type d | wc -l 2>/dev/null || echo "0")
    echo "  Indexed packages: ${pkg_dirs}"
}

# Main function
main() {
    case "${1:-init}" in
        "init")
            init_repo_structure
            create_gitignore
            create_keep_files
            set_permissions
            validate_repo
            show_status
            ;;
        "status")
            show_status
            ;;
        "validate")
            validate_repo
            ;;
        *)
            echo "Usage: $0 [init|status|validate]"
            echo "  init     - Initialize repository structure (default)"
            echo "  status   - Show repository status"
            echo "  validate - Validate repository structure"
            exit 1
            ;;
    esac
}

main "$@"